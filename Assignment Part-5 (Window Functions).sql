#Q1)Rank the customers based on the total amount they've spent on rentals.
select c.customer_id,concat(c.first_name,' ',c.last_name) as full_name,
sum(p.amount) as total_spend,rank() over (order by sum(p.amount) desc) as rank_spend
from customer c join payment p
on c.customer_id=p.customer_id
group by c.customer_id,c.first_name
order by rank_spend;

#Q2)Calculate the cumulative revenue generated by each film over time.
select f.title,r.rental_date,
sum(p.amount) over ( partition by f.title order by r.rental_date) as Cum_revenue
from film f join inventory i on
f.film_id=i.film_id join rental r
on i.inventory_id=r.inventory_id join payment p on
r.rental_id=p.rental_id 
order by f.title,r.rental_date;

#Q3). Determine the average rental duration for each film, considering films with similar lengths.
SELECT 
    f.title,
    f.length,
    f.rental_duration AS predefined_duration,
    AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_actual_duration
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title, f.length, f.rental_duration
ORDER BY f.length;

#Q4)Identify the top 3 films in each category based on their rental counts.
SELECT 
    c.name AS category_name,
    f.title,
    RANK() OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS film_rank
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.category_id, c.name, f.film_id, f.title;

#Q5)Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
SELECT 
    c.customer_id,
    COUNT(r.rental_id) AS total_rentals,
    AVG(COUNT(r.rental_id)) OVER () AS avg_rentals_all,
    COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS diff_from_avg
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY diff_from_avg DESC;

#Q6) Find the monthly revenue trend for the entire rental store over time.
SELECT 
    
    MONTH(p.payment_date) AS month,
    SUM(p.amount) AS monthly_revenue,
    SUM(SUM(p.amount)) OVER (ORDER BY YEAR(p.payment_date), MONTH(p.payment_date)) AS cumulative_revenue
FROM payment p
GROUP BY YEAR(p.payment_date), MONTH(p.payment_date)
ORDER BY  month;

#Q7) Identify the customers whose total spending on rentals falls within the top 20% of all customers.
SELECT *
FROM (
    SELECT 
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) AS full_name,
        SUM(p.amount) AS total_spent,
        NTILE(5) OVER (ORDER BY SUM(p.amount) DESC) AS spend_group
    FROM customer c
    JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, full_name
) AS ranked_customers
WHERE spend_group = 1;

#Q8) Calculate the running total of rentals per category, ordered by rental count.
SELECT 
    c.name AS category_name,
    COUNT(r.rental_id) AS rental_count,
    SUM(COUNT(r.rental_id)) OVER (
        ORDER BY COUNT(r.rental_id) DESC
    ) AS running_total
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.category_id, c.name
ORDER BY rental_count DESC;

#Q9) Find the films that have been rented less than the average rental count for their respective categories.
SELECT 
    c.name AS category_name,
    f.title,
    COUNT(r.rental_id) AS film_rental_count,
    AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id) AS avg_category_rental
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.category_id, c.name, f.film_id, f.title
HAVING COUNT(r.rental_id) < AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id)
ORDER BY c.name, film_rental_count;


#Q10) Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
    SUM(p.amount) AS total_revenue,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) AS revenue_rank
FROM payment p
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY revenue_rank
LIMIT 5;
